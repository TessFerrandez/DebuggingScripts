<!-- Use this template as a starting point for your custom scripts -->
<%@ Language = VBScript %>
<%@ Category = Memory Preassure Analyzers %>
<%@ Description = .NET Memory Analysis%>
<%@ TopLevelScript = True %>
<% Option Explicit %>
<!-- #include File = "inc/helperfunctions.asp" -->
<!-- #include File = "inc/VMFunctions.asp" -->
<%
Dim g_DataFile
Dim g_ShortDumpFileName 
Dim intPosition 
Dim intLen
Dim g_Progress
Dim g_OverallProgress
Dim g_Debugger

Set g_Progress = Manager.Progress
g_Progress.SetOverallRange 0, Manager.DataFiles.Count
g_Progress.OverallPosition = 0
g_Progress.OverallStatus = ""
g_Progress.CurrentStatus = ""
g_Progress.CurrentPosition = 0
g_OverallProgress = 0
g_Progress.OverallStatus = "Starting Analysis"

' Main analysis and reporting loop. One iteration for each dump file
For each g_DataFile in Manager.DataFiles
	If UCase(Right(g_DataFile,4)) = ".DMP" Then

		Set g_Debugger = Manager.GetDebugger(g_DataFile)
		If not g_Debugger is nothing then
		
			'Trim g_DataFile down to just the filename itself for later use
			intPosition = InStrRev(g_DataFile, "\", -1, 1)
			intLen = Len(g_DataFile)
			g_ShortDumpFileName = Right(g_DataFile, intLen - intPosition)
			
			Manager.Write "<H1>" & g_ShortDumpFileName & "</H1>"

            GenerateReportHeader g_DataFile, ".NET Memory Analysis"
            WriteLine ""
            WriteLine ""

            if LoadSOS then
                WriteTOC
                g_Progress.OverallStatus = "Getting .NET version information"
                if PrintEEVersionInfo then
                	UpdateOverallProgress
                	g_Progress.OverallStatus = "Getting GC Heap information"
                	PrintGCHeapInformation
                	UpdateOverallProgress
                	g_Progress.OverallStatus = "Getting information about .NET objects"
                	Print40LargestObjects
                	UpdateOverallProgress
                	g_Progress.OverallStatus = "Getting Finalizequeue information"
                	PrintFinalizequeue
                	UpdateOverallProgress
                	g_Progress.OverallStatus = "Getting LOH information"
                	PrintLOHObjects
                	UpdateOverallProgress
                	g_Progress.OverallStatus = "Determining the size of the cache, this might take a while"
                	PrintCacheSize
                	UpdateOverallProgress
                	g_Progress.OverallStatus = "Getting Session statistics"
                	PrintSessionStatistics
                	UpdateOverallProgress
                	g_Progress.OverallStatus = "Checking if the process is currently in a GC"
                	CheckIfInGC
                	UpdateOverallProgress
		end if
            end if
		End If
		Manager.CloseDebugger g_DataFile	
	End If
	
	UpdateOverallProgress
Next

Sub UpdateOverallProgress()
    g_OverallProgress = g_OverallProgress + 1
    g_Progress.OverallPosition = g_OverallProgress
End Sub 'UpdateOverallProgress

Sub WriteTOC
    Manager.Write "<H2>Table of contents</H2>"
    WriteLine "<a href=#eeversion>.NET Framework Version</a>"
    WriteLine "<a href=#heap>.NET GC Heap Information</a>"
    WriteLine "<a href=#objects>40 most memory consuming .NET object types</a>"
    WriteLine "<a href=#final>.NET Finalizer Queue</a>"
    WriteLine "<a href=#largeobjects>Large Object Heap</a>"
    WriteLine "<a href=#cache>Cache</a>"
End Sub

Function LoadSOS()
    Dim CmdOutput, i
    'Load the .NET debugger extension sos.dll (2.0 version)
    CmdOutput = g_Debugger.Execute("!load C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\sos.dll")
    i = InStr(CmdOutput, "failed")
    if i > 0 then
        Manager.ReportError "Unable to load SOS.dll, can not proceed with .NET analysis", ".NET Analysis only works for x86 .NET Framework 2.0 dumps"
        LoadSOS = false
    else
        LoadSOS = true          
    end if
End Function

Sub PrintArray(ByVal li)
    Dim i

    Manager.Write "<pre>"
    for i = LBound(li) to UBound(li)
        WriteLine li(i)
    next
    Manager.Write "</pre>"
End Sub

Function PrintEEVersionInfo()
    Dim CmdOutput, li
    
    'Get the size of the GC Heaps
    CmdOutput = g_Debugger.Execute("!eeversion")
            
    'Print the !eeheap -gc output
    if Len(CmdOutput) > 0 then
        li = Split(CmdOutput, vbLf)
        if UBound(li) >= 1 then
            Manager.Write "<a name=eeversion></a>"
            Manager.Write "<H2>.NET Version</H2>"
    	    Dim i

            for i = LBound(li) to UBound(li)
        	If InStr(li(i), "Failed") > 0 then
			Manager.ReportError "Either this is not a .NET 2.0 32bit memory dump, or the symbols for mscordacwks could not be found.", "Any data generated by this report is invalid. Try debugging on a machine with the same 2.0 version as the dump target machine."
			PrintEEVersionInfo = false
		End If			
    	    next

            Manager.Write "<pre>"
            for i = LBound(li) to UBound(li)
        	WriteLine li(i)
    	    next
            Manager.Write "</pre>"
        end if
    end if  
    PrintEEVersionInfo = true     
End Function

Sub PrintGCHeapInformation()
    Dim CmdOutput, li,i, LeftParenthesis, RightParenthesis
    
    'Get the size of the GC Heaps
    CmdOutput = g_Debugger.Execute("!eeheap -gc")
            
    'Print the !eeheap -gc output
    if Len(CmdOutput) > 0 then
        li = Split(CmdOutput, vbLf)
        if UBound(li) >= 1 then
            Manager.Write "<a name=heap></a>"
            Manager.Write "<H2>.NET GC Heap Information</H2>"

            Manager.Write "<pre>"
            for i = LBound(li) to UBound(li)
                if InStr(li(i), "Heap") > 0 or InStr(li(i), "heap") > 0 or InStr(li(i), "ephemeral") > 0 then
                    Manager.Write "<B>" & li(i) & "</B><BR/>"
                else
                    WriteLine li(i)
                end if
            next
            Manager.Write "</pre>"

            'Print GC Heap information
            Manager.Write "<BlockQuote>"
            WriteLine "<B>More information:</B>"
            WriteLine "Compare the total GC Heap size to the number of private bytes in the process when the dump was taken (or the dump size on disk) to determine if most of your memory is on the .NET GC Heap"
            WriteLine ""
            WriteLine "In the !eeheap -gc output above you can also see if most of your .NET GC memory is on the small object heaps or on the large object heap (LOH) (objects over 85000 bytes). If you see that most of your memory is on the LOH, look at the <a href=#LargeObjects>LOH output</a> to see what those objects are."
            WriteLine ""
            WriteLine "If the GC Heap is relatively small, run debug diag with leaktracking to track native leaks and analyze the dump with the MemoryAnalysis script instead.  See debug diag help for more information about this."
            WriteLine ""
            WriteLine "<B>Related posts:</B>" 
            WriteLine "<a href=""http://blogs.msdn.com/tess/archive/2005/11/25/496899.aspx"">I have a memory leak!!! What do i do? (defining the ""where"")</a>" 
            WriteLine "<a href=""http://blogs.msdn.com/tess/archive/2009/02/27/net-memory-leak-reader-email-are-you-really-leaking-net-memory.aspx"">Are you really leaking .NET Memory?</a>"
            Manager.Write "</BlockQuote>"

            'print mem info to top report
            for i = LBound(li) to UBound(li)
                if InStr(li(i), "GC Heap Size") > 0 then
                    LeftParenthesis = InStr(li(i), "(")
                    RightParenthesis = InStr(li(i), ")")
                    Manager.ReportInformation "<B>GC Heap usage:</B> " & Mid(li(i), LeftParenthesis +1, RightParenthesis-LeftParenthesis-1) & " Bytes<BR/><BR/>" &_
                        "Common issues for high .NET Memory usage includes:  <a href=#final>Blocked finalizers</a>, <a href=#cache>lots of memory in cache/sessions</a>, lots of <a href=#largeobjects>large objects</a> and memory rooted in statics<BR/>You should also revivew the <a href=#objects>most memory consuming objects</a>."
                end if
            next
        end if       
    end if       
End Sub

Sub Print40LargestObjects()
    Dim CmdOutput, li, i, TotObjPos
    
    'Get the GC heap statistics
    CmdOutput = g_Debugger.Execute("!dumpheap -stat")
            
    'Print the 40 most memory consuming objects
    if Len(CmdOutput) > 0 then
        li = Split(CmdOutput, vbLf)

        TotObjPos = UBound(li)
        'Find position of "Total x objects"
        for i = LBound(li) to UBound(li) 
            if InStr(li(i), "Total") > 0 and InStr(li(i), "objects") > 0 then
                TotObjPos = i
            end if
        next
        
        Manager.Write "<a name=objects></a>"
        Manager.Write "<H2>40 most memory consuming .NET object types</H2>"
        Manager.Write "<pre>"
        WriteLine "<B>MT      Num items    Tot. size Type</B>"
        for i = TotObjPos - 40 to TotObjPos                
            if InStr(li(i), "System.Web.UI") > 0 then
                Manager.Write "<font color=""red""><b>" & li(i) & "</b></font><br/>"
            elseif InStr(li(i), "System.Data") > 0 then
                Manager.Write "<font color=""blue""><b>" & li(i) & "</b></font><br/>"
            elseif InStr(li(i), "System.XML") > 0 then
                Manager.Write "<font color=""green""><b>" & li(i) & "</b></font><br/>"
            elseif InStr(li(i), "System") <= 0 and InStr(li(i), "Microsoft") <= 0 and InStr(li(i), "Free") <= 0 then
                Manager.Write "<font color=""purple""><b>" & li(i) & "</b></font><br/>"                
            else
                Manager.Write li(i) & "<br/>"
            end if
        next
        Manager.Write "</pre>"
            
        Manager.Write "<Table><TR><TD><b>Color</B></TD><TD><B>Object type</B></TD></TR>"
        Manager.Write "<TR><TD><font color=""red"">Red</font></TD><TD>System.Web.UI... objects</TD></TR>"
        Manager.Write "<TR><TD><font color=""blue"">Blue</font></TD><TD>System.Data... objects</TD></TR>"
        Manager.Write "<TR><TD><font color=""green"">Green</font></TD><TD>System.XML... objects</TD></TR>"
        Manager.Write "<TR><TD><font color=""purple"">Purple</font></TD><TD>Custom objects</TD></TR>"
        Manager.Write "</Table>"
        
        Manager.Write "<BlockQuote><B>More Information</B><BR/>"
        WriteLine "For more information on how to read !dumpheap -stat output, see <a href=""http://blogs.msdn.com/tess/archive/2005/11/25/496973.aspx"">!dumpheap -stat explained</a>"
        WriteLine ""
        WriteLine "To get info on how to dig deeper into the !dumpheap -stat output see <a href=""http://blogs.msdn.com/tess/archive/2007/08/13/asp-net-memory-investigation.aspx"">ASP.NET Memory Investigation</a>"
        Manager.Write "</BlockQuote>"
    end if       
End Sub

Sub PrintFinalizequeue()
    Dim CmdOutput, li, i, LeftPos, RightPos, strFinalizationInfo, numReadyForFinalization
    
    'Get finalizer queue info
    CmdOutput = g_Debugger.Execute("!finalizequeue")
            
    'Print the !finalizequeueu output
    if Len(CmdOutput) > 0 then
        li = Split(CmdOutput, vbLf)
        if UBound(li) >= 1 then
            Manager.Write "<a name=final></a>"
            Manager.Write "<H2>Finalizer queue</H2>"

            Dim StartColoring 
            
            StartColoring = false
            
            Manager.Write "<pre>"            
            for i = LBound(li) to UBound(li)
                If StartColoring then 
                    if InStr(li(i), "Total") > 0 and InStr(li(i), "objects") > 0 then
                        WriteLine li(i)
                    elseif InStr(li(i), "System") <= 0 and InStr(li(i), "Microsoft") <= 0 and InStr(li(i), "Free") <= 0 then
                        Manager.Write "<font color=""purple""><b>" & li(i) & "</b></font><br/>"                                        
                    else
                        WriteLine li(i)
                    end if
                else
                    if InStr(li(i), "Ready for finalization") > 0 then
                        Manager.Write "<b>" & li(i) & "</b><br/>"
                    else
                        WriteLine li(i)
                        if InStr(li(i), "TotalSize") > 0 then
                            StartColoring = true
                        end if
                    end if
                end if
            next
            Manager.Write "</pre>"
            Manager.Write "- <BR/>"
            
            Manager.Write "<BlockQuote><B>More Information:</B><BR/>"
            WriteLine "!finalizequeue will show all the objects on the heap that have finalizer methods, and have yet not been disposed of.  It is a good idea to look through this list and verify that all your ""custom"" objects on this list really need finalizers/destructors, as having unneccesary finalizers will lead to higher memory consumption and a potential for blocked finalizers."
            WriteLine ""
            WriteLine "<B>Related posts:</B>"
            WriteLine "<a href=""http://blogs.msdn.com/tess/archive/2006/03/27/561715.aspx"">Unblock my finalizer</a>"
            WriteLine "<a href=""http://blogs.msdn.com/tess/archive/2009/02/03/net-memory-leak-to-dispose-or-not-to-dispose-that-s-the-1-gb-question.aspx"">To dispose or not to dispose, that's the 1 GB question</a>"
            Manager.Write "</BlockQuote>"

            'print num objects ready for finalization
            strFinalizationInfo = "<B>Number of objects ready for finalization:</B> "
            numReadyForFinalization = 0
            for i = LBound(li) to UBound(li)
                if InStr(li(i), "Ready for finalization") > 0 then
                    LeftPos = InStr(li(i), "finalization") + 12
                    RightPos = InStr(li(i), "objects")
                    numReadyForFinalization = numReadyForFinalization + Mid(li(i), LeftPos, RightPos - LeftPos)
                end if
            next
            if numReadyForFinalization > 0 then
                Manager.ReportWarning strFinalizationInfo & numReadyForFinalization & "<BR/>", "This is an indication that your finalizer thread may be blocked. Look at <a href=#final>finalizequeue info and finalizer stack</a> to determine why/if the finalizer is blocked"           
                
                'Get the finalizer thread and its stack
                CmdOutput = g_Debugger.Execute("!threads")
                if Len(CmdOutput) > 0 then
                    li = Split(CmdOutput, vbLf)
                    if UBound(li) >= 1 then
                        for i = LBound(li) to UBound(li)
                            if InStr(li(i), "(Finalizer)") then
                                WriteLine "As the number of finalizable objects is more than 0, please check the finalizer thread to see if it is blocked or active"
                                WriteLine ""
                                WriteLine "<B>Finalizer Thread</B>"
                                li(i) = Trim(li(i))
                                RightPos = InStr(li(i), " ")
                                CmdOutput = g_Debugger.Execute("~" & Left(li(i), RightPos - 1) & " e !clrstack")
                                WriteLine ""
                                WriteLine "" 
                                PrintArray Split(CmdOutput, vbLf)
                            end if
                        next
                    end if
                End if                
            end if    

        end if
    end if       
End Sub

Sub PrintLOHObjects()
    Dim CmdOutput, li, i
    
    'Get LOH Objects (or objects over 85000 bytes)
    CmdOutput = g_Debugger.Execute("!dumpheap -min 85000")
            
    'Print the LOH output
    if Len(CmdOutput) > 0 then
        li = Split(CmdOutput, vbLf)
        if UBound(li) >= 1 then
            Manager.Write "<a name=largeobjects></a>"
            Manager.Write "<H2>Objects on the Large Object Heap</H2>"
            PrintArray li
        end if
        
        Manager.Write "<BlockQuote><B>More information:</B>"
        WriteLine "A high amount of large objects (strings and arrays over 85000 bytes) can lead to GC Heap framgmentation and thus higher memory usage in your application."
        WriteLine "Look through the large objects, to dig deeper you can run !do on the object address in windbg, to see if these objects are expected and if you can minimize their usage in any way, by caching etc."
        WriteLine "Common reasons for high amounts of large objects are <a href=""http://blogs.msdn.com/tess/archive/2006/11/24/asp-net-case-study-bad-perf-high-memory-usage-and-high-cpu-in-gc-death-by-viewstate.aspx"">large viewstate</a> and <a href=""http://blogs.msdn.com/tess/archive/2008/09/02/outofmemoryexceptions-while-remoting-very-large-datasets.aspx"">Dataset serialization</a>"
        Manager.Write "</BlockQuote>"
    end if       
End Sub

Sub PrintCacheSize()
    Dim CmdOutput, li, i, CacheMT, CacheSize

    'Get MT for system.web.caching.cache
    CmdOutput = g_Debugger.Execute("!name2ee System.Web.dll System.Web.Caching.Cache")
    
    if Len(CmdOutput) > 0 then
        li = Split(CmdOutput, vbLf)
        if Ubound(li) >= 4 then
            CacheMT = Right(li(2), 8)
            
            'Get the cacheobjects
            CmdOutput = g_Debugger.Execute("!dumpheap -mt " & CacheMT & " -short")
            
            'Print the LOH output
            if Len(CmdOutput) > 0 then
                li = Split(CmdOutput, vbLf)
                if UBound(li) >= 1 then
                    Manager.Write "<a name=cache></a>"
                    Manager.Write "<H2>Size of Web Caches in the process</H2>"
                    Manager.Write "<pre>"
                    for i = LBound(li) to UBound(li) - 1
                        If InStr(li(i), "---") = 0 then 
                            CacheSize = g_Debugger.Execute("!objsize " & li(i))
                            Manager.Write CacheSize & "<BR/>"
                                                                                    
                            Dim EqualSign, Parenthesis
                            EqualSign = InStr(CacheSize, "=")
                            Parenthesis = InStr(EqualSign, CacheSize, "(")
                            Manager.ReportInformation "<B>Cache Size:</B> " & Mid(CacheSize, EqualSign + 2, Parenthesis - EqualSign - 2) & " Bytes<BR/><BR/>This includes memory for objects stored in in-process sessions"
                        end if
                    next
                    Manager.Write "</pre>"
                    Manager.Write "<BlockQuote><B>More information:</B><BR/>"
                    WriteLine "There is one System.Web.Caching.Cache object referencing all cached objects, per web application"
                    WriteLine "In-Proc session state is stored in the cache, so the size of all session vars is also included in the size of the cache for the specific application"
                    WriteLine ""
                    WriteLine "<b>Related articles</b>"
                    WriteLine "<a href=""http://blogs.msdn.com/tess/archive/2006/01/26/517819.aspx"">How much are you caching</a>"
                    WriteLine "<a href=""http://blogs.msdn.com/tess/archive/2008/05/28/asp-net-memory-thou-shalt-not-store-ui-objects-in-cache-or-session-scope.aspx"">UI objects in session scope</a>"
                    Manager.Write "</BlockQuote>"
                end if
            end if                   
        end if
    end if
End Sub

Sub PrintSessionStatistics()
    Dim CmdOutput, li, i, SessionMT

    'Get MT for system.web.caching.cache
    CmdOutput = g_Debugger.Execute("!name2ee System.Web.dll System.Web.SessionState.InProcSessionState")
    
    if Len(CmdOutput) > 0 then
        li = Split(CmdOutput, vbLf)
        if Ubound(li) >= 4 then
            SessionMT = Right(li(2), 8)
            
            'Get the sessionobjects
            CmdOutput = g_Debugger.Execute("!dumpheap -mt " & SessionMT & " -stat")
            
            'Print the number of sessions
            if Len(CmdOutput) > 0 then
                li = Split(CmdOutput, vbLf)
                if UBound(li) >= 1 then
                    for i = LBound(li) to UBound(li)
                        If InStr(li(i), "Total") > 0 and InStr(li(i), "objects") > 0 then 
                            Dim LeftPos, RightPos
                            LeftPos = InStr(li(i), "Total") + 5
                            RightPos = InStr(li(i), "objects")
                            Manager.ReportInformation "<B>Number of active in-process sessions:</B> " & Mid(li(i), LeftPos, RightPos-LeftPos)
                        end if
                    next
                end if
            end if                   
        end if
    end if
End Sub

Sub CheckIfInGC
    Dim CmdOutput, li, i
    'Check to see if any thread is in (GC)
    CmdOutput = g_Debugger.Execute("!threads")
    if Len(CmdOutput) > 0 then
        li = Split(CmdOutput, vbLf)
        if UBound(li) >= 1 then
            for i = LBound(li) to UBound(li)
                if InStr(li(i), "(GC)") then
                    Manager.ReportWarning "The process is currently in the middle of a garbage collection", "Any information about the GC heaps and the objects on the GC heaps may be invalid"
                end if
            next
        end if
    End if                
End Sub

Function RemoveExtraSpaces(strinput)
    strinput = Replace(strinput, "  ", " ") 
    if InStr(strinput, "  ") > 0 then
        strinput = RemoveExtraSpaces(strinput)
    end if 
    RemoveExtraSpaces = strinput
End Function

%>
